
TODO:
1. »справить ошибку с тем, что к одному DbContext могут обращатьс€ одновременно
несколько объектов.
2. –еализовать ICitilinkMiscellaneousRepositoryFacade.
3. –еализовать разделение моделей Process в различных семантиках. ∆елательно
исправить бардак с репозиторием.
4. 2 репозитори€, CitilinkExtractionStateRepository и CitilinkExtractorStorageStateRepository,
созданы по одному общему принципу, но у них нет общего предка, они используют dbContext
вместо dbContextFactory. »справить бы это и проконтроллировать чтобы не было проблем с
многопоточным доступом.


Implementation details:

—уществует разграничение сущностей на родительские и дочерние.

¬ нынешней реализации на выходе из репозитори€, родительска€ сущность содержит 
всЄ дерево дочерних сущностей в качестве подполей, в то врем€ как навигаци€ из
дочерних сущностей в родительские должна осуществл€тьс€ через запрос к репозиторию
родительской сущности. Ёто св€зано с ограничени€ми, накладываемыми, и моей ленью
погружатьс€ в тонкости EF. (написанное здесь следует учитывать при прописывании
полей entitiesWithIncludes в entityRepository)

Ѕольшинство репозиториев используют IDbContextFactory<PriceTrackerContext>
дл€ создани€ одного контекста на 1 запрос.

Warnings:
1. CitilinkParsingExecutionStateRepository использует один DbContext на весь репозиторий.
ƒа и сделан он костыльно. “о же самое - CitilinkExtractorStorageStateRepository.

«арегистрировать: Citilink Merch, Misc; Shop

IMerchRepositoryFacade merchRepository,
            ITimestampedPriceRepositoryFacade timestampedPriceRepository,
            IPriceHistoryRepositoryFacade priceHistoryRepository,
            IShopRepositoryFacade shopRepository,
            ICitilinkMerchRepositoryFacade citilinkMerchRepository
            тоже зарегать

RepositoryInitializer?

Repository Adapters in merch Repository are by now skipped at DI.